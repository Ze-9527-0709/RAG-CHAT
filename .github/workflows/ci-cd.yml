name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Run Python tests
      run: |
        cd backend
        # Add your Python tests here
        python -m pytest tests/ || echo "No tests found"

    - name: Run Node.js tests
      run: |
        cd frontend
        npm run test || echo "No tests configured"

    - name: Lint Python code
      run: |
        cd backend
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Lint TypeScript code
      run: |
        cd frontend
        npm run lint || echo "Linting skipped"

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Backend Build
    - name: Extract backend metadata
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Frontend Build
    - name: Extract frontend metadata
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
        kubectl config current-context

    - name: Update image tags in manifests
      run: |
        # Update backend image
        sed -i "s|image: rag-chat-backend:.*|image: ${{ needs.build.outputs.backend-image }}|g" k8s/02-backend.yaml
        # Update frontend image  
        sed -i "s|image: rag-chat-frontend:.*|image: ${{ needs.build.outputs.frontend-image }}|g" k8s/03-frontend.yaml

    - name: Deploy to staging
      run: |
        kubectl apply -f k8s/ -n rag-chat-app-staging
        kubectl rollout status deployment/rag-chat-backend -n rag-chat-app-staging --timeout=300s
        kubectl rollout status deployment/rag-chat-frontend -n rag-chat-app-staging --timeout=300s

    - name: Verify deployment
      run: |
        kubectl get pods -n rag-chat-app-staging
        kubectl get services -n rag-chat-app-staging

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > ~/.kube/config
        kubectl config current-context

    - name: Update image tags in manifests
      run: |
        # Update backend image
        sed -i "s|image: rag-chat-backend:.*|image: ${{ needs.build.outputs.backend-image }}|g" k8s/02-backend.yaml
        # Update frontend image
        sed -i "s|image: rag-chat-frontend:.*|image: ${{ needs.build.outputs.frontend-image }}|g" k8s/03-frontend.yaml

    - name: Deploy to production
      run: |
        kubectl apply -f k8s/ -n rag-chat-app-prod
        kubectl rollout status deployment/rag-chat-backend -n rag-chat-app-prod --timeout=600s
        kubectl rollout status deployment/rag-chat-frontend -n rag-chat-app-prod --timeout=600s

    - name: Verify deployment
      run: |
        kubectl get pods -n rag-chat-app-prod
        kubectl get services -n rag-chat-app-prod

    - name: Run smoke tests
      run: |
        # Add smoke tests here
        echo "Running smoke tests..."
        # Example: curl health check
        # INGRESS_IP=$(kubectl get ingress rag-chat-ingress -n rag-chat-app-prod -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        # curl -f http://$INGRESS_IP/health || exit 1

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'